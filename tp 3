#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct Noeud {
    int valeur;
    struct Noeud *next;
    struct Noeud *prev;
} Noeud;

Noeud *cree(int valeur) {
    Noeud *P = (Noeud *)malloc(sizeof(Noeud));
    P->prev = NULL;
    P->next = NULL;
    P->valeur = valeur;
    return P;
}

void affiche(Noeud *debut) {
    if (!debut)
        printf("\n\nListe vide\n");
    else {
        printf("\n\t---Affichage Normal---\n");
        while (debut) {
            printf("\t\n%d\n", debut->valeur);
            debut = debut->next;
        }
    }
}

void afficherInverse(Noeud *debut) {
    if (!debut) {
        printf("Liste vide\n");
        return;
    }

    while (debut->next != NULL)
        debut = debut->next;

    printf("\t\n---Affichage Inverse---\n");

    while (debut != NULL) {
        printf("\n\t%d\n", debut->valeur);
        debut = debut->prev;
    }
}

Noeud *ajouterD(Noeud *debut, int valeur) {
    if (debut == NULL)
        return cree(valeur);
    Noeud *P = cree(valeur);
    P->next = debut;
    P->next->prev = P;
    return P;
}

Noeud *ajouterF(Noeud *debut, int valeur) {
    if (!debut)
        return cree(valeur);

    Noeud *temp = debut;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = cree(valeur);
    temp->next->prev = temp;
    return debut;
}

int taille(Noeud *debut) {
    int c = 0;
    while (debut != NULL) {
        c++;
        debut = debut->next;
    }
    return c;
}

Noeud *insertion(int position, Noeud *debut, int valeur) {
    if (!debut)
        return cree(valeur);

    if (position == 1)
        return ajouterD(debut, valeur);

    int t = taille(debut);

    if (position == t)
        return ajouterF(debut, valeur);

    Noeud *P = debut;
    for (int a = 2; a < position && P->next != NULL; a++, P = P->next);

    Noeud *temp = P->next;
    P->next = cree(valeur);
    P->next->next = temp;
    P->next->prev = P;
    temp->prev = P->next;

    return debut;
}

Noeud *rechercher(Noeud *debut, int valeur) {
    if (!debut) {
        printf("\n\tListe vide");
        return debut;
    }

    Noeud *temp = debut;
    while (temp != NULL) {
        if (temp->valeur == valeur) {
            printf("\n\tValeur trouve !\n");
            return debut;
        }
        temp = temp->next;
    }

    printf("\n\tValeur non trouve!");
    return debut;
}

Noeud *suppressionD(Noeud *debut) {
    if (!debut) {
        printf("\n\tListe vide\n");
        return debut;
    }

    Noeud *temp = debut;
    debut = debut->next;
    if (debut != NULL)
        debut->prev = NULL;
    free(temp);

    return debut;
}

Noeud *suppressionF(Noeud *debut) {
    if (!debut) {
        printf("\n\tListe vide\n");
        return debut;
    }

    Noeud *temp = debut;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    if (temp == debut) {
        free(temp);
        return NULL;
    }

    temp->prev->next = NULL;
    free(temp);
    return debut;
}

Noeud *suppressionP(Noeud *debut, int pos) {
    if (pos > taille(debut)) {
        printf("\n\tPosition Invalide!\n\n");
        return debut;
    }

    if (pos == 1)
        return suppressionD(debut);

    int c = taille(debut);
    if (pos == c)
        return suppressionF(debut);

    Noeud *temp = debut->next;
    for (int a = 2; a < pos; a++, temp = temp->next);

    temp->prev->next = temp->next;
    temp->next->prev = temp->prev;
    free(temp);
    return debut;
}

Noeud *modifierD(Noeud *debut, int valeur) {
    if (!debut) {
        printf("\n\tListe vide\n\n");
        return debut;
    }
    debut->valeur = valeur;
    return debut;
}

Noeud *modifierF(Noeud *debut, int valeur) {
    if (!debut) {
        printf("\n\tListe vide\n\n");
        return debut;
    }

    while (debut->next != NULL)
        debut = debut->next;

    debut->valeur = valeur;
    return debut;
}

Noeud *modifierP(Noeud *debut, int pos, int valeur) {
    if (pos == 1)
        return modifierD(debut, valeur);

    int c = taille(debut);
    if (pos == c)
        return modifierF(debut, valeur);

    Noeud *temp = debut->next;
    for (int a = 2; a < pos; a++, temp = temp->next);
    temp->valeur = valeur;

    return debut;
}

Noeud *tri(Noeud *debut) {
    if (!debut) {
        printf("\n\tListe vide!\n");
        return NULL;
    }

    int min;
    Noeud *Pmin, *ptr, *Head = debut;

    while (debut != NULL) {
        Pmin = debut;
        min = Pmin->valeur;
        ptr = debut->next;

        while (ptr != NULL) {
            if (ptr->valeur < min) {
                min = ptr->valeur;
                Pmin = ptr;
            }
            ptr = ptr->next;
        }

        if (Pmin != debut) {
            Pmin->valeur = debut->valeur;
            debut->valeur = min;
        }

        debut = debut->next;
    }
    return Head;
}

int position(Noeud *debut) {
    int a, t = taille(debut);
    printf("Entrez une position:");
    do {
        scanf("%d", &a);
        if (t == 0)
            return 0;
        if (a > t || a < 0) {
            if (a > t)
                printf("position > %d plus grand que la taille!\n", t);
            if (a <= 0)
                printf("Position negative!\n ");
            printf("Entrez a nouveau:");
        }
    } while (a > t || a < 0);
    printf("\n");
    return a;
}

void remplissageMan(Noeud *debut) {
    if (!debut) {
        printf("\t\nListe vide\n");
        return;
    }
    int a = 1;
    while (debut != NULL) {
        printf("Entrez une valeur pour position %d:\n", a);
        scanf("%d", &debut->valeur);
        a++;
        debut = debut->next;
    }
}

void remplissageAuto(Noeud *debut) {
    srand(time(NULL));
    while (debut) {
        debut->valeur = rand() / 10;
        debut = debut->next;
    }
}

int valeur() {
    int valeur;
    printf("Entrez une valeur:\n");
    scanf("%d", &valeur);
    return valeur;
}

int main() {
    int x, y;
    Noeud *Start = NULL;

    do {
        printf("\t0-exit\n");
        printf("\t1-Ajouter un noeud vers une position\n");
        printf("\t2-Supprimer un noeud vers une position\n");
        printf("\t3-Modifier une valeur vers une position\n");
        printf("\t4-Trier la liste en ordre croissant\n");
        printf("\t5-Taille de la liste\n");
        printf("\t6-Affichage\n");
        printf("\t7-Modifier une valeur a une position donne\n\n");

        scanf("%d", &x);

        if (x == 0) {
            exit(0);
        } else if (x == 1) {
            Start = insertion(position(Start), Start, valeur());
        } else if (x == 2) {
            Start = suppressionP(Start, position(Start));
        } else if (x == 3) {
            Start = modifierP(Start, position(Start), valeur());
        } else if (x == 4) {
            Start = tri(Start);
        } else if (x == 5) {
            printf("\t\t\t\n\n\n%d\n\n\n\n", taille(Start));
        } else if (x == 6) {
            printf("1-Affichage normal\n");
            printf("2-Affichage inverse\n");
            do {
                scanf("%d", &y);
                if (y < 1 || y > 2)
                    printf("Entrez a nouveau:");
            } while (y < 1 || y > 2);

            if (y == 1)
                affiche(Start);
            else if (y == 2)
                afficherInverse(Start);
        } else if (x == 7) {
            Start = modifierP(Start, position(Start), valeur());
        }

    } while (1);

    return 0;
}
